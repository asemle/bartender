{"version":3,"sources":["logo.svg","FlipContainer.js","Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","FlipContainer","props","state","clicked","data","strDrink","strDrinkThumb","strGlass","strIngredient1","strIngredient2","strIngredient3","strIngredient4","strIngredient5","strIngredient6","strIngredient7","strIngredient8","strInstructions","axios","get","this","id","then","response","console","log","setState","drinks","className","onClick","click","bind","style","backgroundImage","display","Component","Wrapper","onEnd","map","key","onSwipeLeft","onSwipeRight","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.13650b8a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from 'react';\nimport axios from 'axios';\n\nexport default class FlipContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            clicked: false,\n            data: { \n                strDrink: \"\", \n                strDrinkThumb: \"\", \n                strGlass: \"\",\n                strIngredient1: \"\",\n                strIngredient2: \"\",\n                strIngredient3: \"\",\n                strIngredient4: \"\",\n                strIngredient5: \"\",\n                strIngredient6: \"\",\n                strIngredient7: \"\",\n                strIngredient8: \"\",\n                strInstructions: \"\"\n\n            }\n        }\n    }\n    componentDidMount() {\n        axios.get(`https://www.thecocktaildb.com/api/json/v1/1/lookup.php?i=${this.props.id}`)\n        .then((response) => {\n            console.log(response);\n            this.setState({\n                data: response.data.drinks[0]\n            })\n        })\n    }\n    click() {\n        this.setState({\n            clicked: !this.state.clicked\n        });\n    }\n\n    render() {\n        return (\n            <div className={this.state.clicked ? \"clicked flip-container\" : \"flip-container\"} onClick={this.click.bind(this)}>\n                    <div className=\"flipper\">\n                    <div \n                        className=\"flash front\"\n                        style={{ backgroundImage: `url(${this.state.data.strDrinkThumb})`}}>\n                        <h2>{this.state.data.strDrink}</h2>\n                        </div>\n                        <div className=\"flash back\"> \n                            <h4>{this.state.data.strDrink}</h4>\n                            <ul>\n                                <li \n                                    style={{ display: this.state.data.strIngredient1 ? 'list-item' : 'none' }}>{this.state.data.strIngredient1}</li>\n                                <li\n                                    style={{ display: this.state.data.strIngredient2 ? 'list-item' : 'none' }}>{this.state.data.strIngredient2}</li>\n                                <li\n                                    style={{ display: this.state.data.strIngredient3 ? 'list-item' : 'none' }}>{this.state.data.strIngredient3}</li>\n                                <li\n                                    style={{ display: this.state.data.strIngredient4 ? 'list-item' : 'none' }}>{this.state.data.strIngredient4}</li>\n                                <li\n                                    style={{ display: this.state.data.strIngredient5 ? 'list-item' : 'none' }}>{this.state.data.strIngredient5}</li>\n                                <li\n                                    style={{ display: this.state.data.strIngredient6 ? 'list-item' : 'none' }}>{this.state.data.strIngredient6}</li>\n                                <li\n                                    style={{ display: this.state.data.strIngredient7 ? 'list-item' : 'none' }}>{this.state.data.strIngredient7}</li>\n                                <li\n                                    style={{ display: this.state.data.strIngredient8 ? 'list-item' : 'none' }}>{this.state.data.strIngredient8}</li>\n                            </ul>\n                            <p>Glass: {this.state.data.strGlass}</p>\n                            <p>{this.state.data.strInstructions}</p>\n                        </div>\n                </div>\n            </div>\n        );\n\n    }\n\n}","import React from 'react';\nimport Cards, { Card } from 'react-swipe-card';\nimport FlipContainer from './FlipContainer';\n\n\nconst data = [11001,11003,11004,11006,11008,11728,14167,17181,17212,11007,11009,11000,11113,12089,17211,11410,11403,17252,11002,12528,11102,11690,17207,17196,13971,11008,12196,11600,14366,12402,17255,13731,17251]\n\nexport default function Wrapper() {\n    return (\n        <Cards onEnd={() => console.log('swipe left')} className='master-root'>\n            {data.map(id =>\n                <Card \n                    key={id}\n                    \n                    onSwipeLeft={() => console.log('swipe left')}\n                    onSwipeRight={() => console.log('swipe left')}>\n                    <FlipContainer id={id}/>\n                </Card>\n            )}\n        </Cards>\n    )\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Wrapper from './Wrapper'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        \n      </header>\n      <Wrapper/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}